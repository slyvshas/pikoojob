// src/types_db.ts
// This file would be generated by Supabase CLI if you had database tables.
// For now, it's a minimal setup for auth helpers.
// Example: supabase gen types typescript --project-id your-project-id --schema public > src/types_db.ts

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string // UUID, matches auth.users.id
          updated_at: string | null
          username: string | null
          full_name: string | null
          avatar_url: string | null
          is_admin?: boolean | null // Added for admin role
        }
        Insert: {
          id: string // Usually UUID
          updated_at?: string | null
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
          is_admin?: boolean | null
        }
        Update: {
          id?: string
          updated_at?: string | null
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
          is_admin?: boolean | null
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      job_postings: { // New table for job postings
        Row: {
          id: string // uuid, primary key
          title: string
          company_name: string
          company_logo_url: string | null
          company_logo_ai_hint: string | null
          company_description: string | null
          location: string
          description: string // Short description for cards
          full_description: string | null // Detailed description, allows HTML
          requirements: string[] | null // Array of strings
          employment_type: 'Full-time' | 'Part-time' | 'Contract' | 'Internship'
          salary: string | null
          posted_date: string // timestamptz
          external_apply_link: string
          tags: string[] | null // Array of strings
          created_at: string // timestamptz
          updated_at: string // timestamptz
          created_by: string | null // uuid, foreign key to auth.users
        }
        Insert: {
          id?: string // uuid, defaults to gen_random_uuid()
          title: string
          company_name: string
          company_logo_url?: string | null
          company_logo_ai_hint?: string | null
          company_description?: string | null
          location: string
          description: string
          full_description?: string | null
          requirements?: string[] | null
          employment_type: 'Full-time' | 'Part-time' | 'Contract' | 'Internship'
          salary?: string | null
          posted_date?: string // timestamptz, defaults to now()
          external_apply_link: string
          tags?: string[] | null
          created_at?: string // timestamptz, defaults to now()
          updated_at?: string // timestamptz, defaults to now()
          created_by?: string | null // uuid
        }
        Update: {
          id?: string
          title?: string
          company_name?: string
          company_logo_url?: string | null
          company_logo_ai_hint?: string | null
          company_description?: string | null
          location?: string
          description?: string
          full_description?: string | null
          requirements?: string[] | null
          employment_type?: 'Full-time' | 'Part-time' | 'Contract' | 'Internship'
          salary?: string | null
          posted_date?: string
          external_apply_link?: string
          tags?: string[] | null
          updated_at?: string // timestamptz, managed by trigger
          created_by?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "job_postings_created_by_fkey"
            columns: ["created_by"]
            referencedRelation: "users" // Corrected: should reference auth.users
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Helper type for profile data
export type Profile = Database['public']['Tables']['profiles']['Row'];
// Helper type for job posting data from DB
export type DbJobPosting = Database['public']['Tables']['job_postings']['Row'];
