// src/types_db.ts
// This file would be generated by Supabase CLI if you had database tables.
// For now, it's a minimal setup for auth helpers.
// Example: supabase gen types typescript --project-id your-project-id --schema public > src/types_db.ts

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string // UUID, matches auth.users.id
          updated_at: string | null
          username: string | null
          full_name: string | null
          avatar_url: string | null
          // Add any other profile fields you need
        }
        Insert: {
          id: string // Usually UUID
          updated_at?: string | null
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
        }
        Update: {
          id?: string
          updated_at?: string | null
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      // If you create other tables, define them here.
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Helper type for profile data
export type Profile = Database['public']['Tables']['profiles']['Row'];
